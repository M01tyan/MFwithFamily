/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.27
 * Generated at: 2020-05-11 00:12:11 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import model.User;
import model.Family;
import java.util.*;

public final class share_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("model.User");
    _jspx_imports_classes.add("model.Family");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\">\n");
      out.write("<link rel=\"stylesheet\" href=\"https://code.getmdl.io/1.3.0/material.indigo-pink.min.css\">\n");
      out.write("<script defer src=\"https://code.getmdl.io/1.3.0/material.min.js\"></script>\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.4.1.min.js\"></script>\n");
      out.write("<title>Money Forward with Family</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\t");

	User user = (User) session.getAttribute("user");
	Family family = (Family) session.getAttribute("family");
	
      out.write("\n");
      out.write("\t<a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/balance\">戻る</a>\n");
      out.write("\n");
      out.write("\t<h1>家族連携</h1>\n");
      out.write("\t");
 if (family.getId() == -1) { 
      out.write("\n");
      out.write("\t<form name=\"createShareCode\" method=\"get\" action=\"share\">\n");
      out.write("\t\t<input type=\"submit\" value=\"createShareCode\" name=\"createShareCode\"><BR>\n");
      out.write("\t</form>\n");
      out.write("\t");
 } else { 
      out.write("\n");
      out.write("\t<p>共有コード</p>\n");
      out.write("\t");
      out.print( family.getShareCode() );
      out.write('\n');
      out.write('	');
 } 
      out.write("\n");
      out.write("\n");
      out.write("\t<p>共有コードの入力</p>\n");
      out.write("\t");
 String message = (String)request.getAttribute("message"); 
      out.write("\n");
      out.write("\t<span style=\"color: red\">");
      out.print( message == null ? "" : message );
      out.write("</span>\n");
      out.write("\t<form name=\"inputShareCode\" method=\"post\" action=\"share\">\n");
      out.write("\t\t<input type=\"text\" name=\"inputShareCode\" />\n");
      out.write("\t\t<input type=\"submit\" value=\"送信\" />\n");
      out.write("\t</form>\n");
      out.write("\n");
      out.write("\t<p>家族一覧</p>\n");
      out.write("\t");
 List<User> userList = family.getUserList(); 
      out.write('\n');
      out.write('	');
 for (int i=0; i<userList.size(); i++) { 
      out.write("\n");
      out.write("\t<div style=\"display: flex; flex-direction: row\">\n");
      out.write("\t\t");
 if (userList.get(i).getId()==user.getId()) { 
      out.write("\n");
      out.write("\t\t<p>あなた</p>\n");
      out.write("\t\t");
 } 
      out.write("\n");
      out.write("\t\t<p>");
      out.print( userList.get(i).getName() );
      out.write("</p>\n");
      out.write("\t\t<button class=\"mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent\" id=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${userList.get(i).getId()}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\n");
      out.write("\t  \t\t連携解除\n");
      out.write("\t  \t</button>\n");
      out.write("\n");
      out.write("\t</div>\n");
      out.write("\t");
 } 
      out.write("\n");
      out.write("\t<script>\n");
      out.write("\t\tvar buttons = document.querySelectorAll('button');\n");
      out.write("\t\tbuttons.forEach(button => {\n");
      out.write("\t\t\tbutton.addEventListener('click', event => {\n");
      out.write("\t\t\t\tindex = [].slice.call(buttons).indexOf(button);\n");
      out.write("\t\t\t\t$.ajax({\n");
      out.write("\t\t\t\t\ttype    : \"DELETE\",\n");
      out.write("\t\t\t\t    url     : location.href + \"?id=\"+index,\n");
      out.write("\t\t\t\t    async   : true,\n");
      out.write("\t\t\t\t    success : function(data) {\n");
      out.write("\t\t\t\t    \tconsole.log(\"SUCCESS!\");\n");
      out.write("\t\t\t\t    \talert(\"削除に成功しました！\");\n");
      out.write("\t\t\t\t    \tlocation.reload();\n");
      out.write("\t\t\t\t    },\n");
      out.write("\t\t\t\t    error : function(XMLHttpRequest, textStatus, errorThrown) {\n");
      out.write("\t\t\t\t      alert(\"リクエスト時になんらかのエラーが発生しました：\" + textStatus +\":\\n\" + errorThrown);\n");
      out.write("\t\t\t\t    }\n");
      out.write("\t\t\t\t  });\n");
      out.write("\t\t\t});\n");
      out.write("\t\t});\n");
      out.write("\t</script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
